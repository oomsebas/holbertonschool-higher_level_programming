Test for task 1 inheritance project
============================================

Write a class MyList that inherits from list:

Public instance method: def print_sorted(self): that prints the list, but sorted (ascending sort)
You can assume that all the elements of the list will be of type int
You are not allowed to import any module
___________________________________________

Import function to tests:
>>> MyList = __import__('1-my_list').MyList



Tests:
>>> my_list1 = MyList()
>>> my_list1.print_sorted()
[]

>>> my_list2 = MyList()
>>> my_list2.append(1)
>>> my_list2.append("#")
>>> my_list2.append(None)
>>> my_list2.print_sorted()
Traceback (most recent call last):
TypeError: unorderable types: str() < int()

>>> my_list3 = MyList()
>>> my_list3.append([5, 2, 3])
>>> my_list3.append([1, 2, 3])
>>> my_list3.print_sorted()
[[1, 2, 3], [5, 2, 3]]

>>> my_list4 = MyList()
>>> my_list4.append(None)
>>> my_list4.append(1)
>>> my_list4.append(2)
>>> my_list4.print_sorted()
Traceback (most recent call last):
TypeError: unorderable types: int() < NoneType()

Checking docstring for MyList:
>>> __import__('1-my_list').MyList.__doc__ != None
True

Import ``MyList`` from the ``1-my_list`` module:
>>> MyList = __import__('1-my_list').MyList

Creating a new Instance:
>>> my_list = MyList()

Printing empty my_list:
>>> print(my_list)
[]

Checking if my_list is a subclass of list:
>>> issubclass(MyList, list)
True

Checking append:
>>> my_list.append(4)
>>> print(my_list)
[4]

Checking insert:
>>> my_list.insert(0, 5)
>>> print(my_list)
[5, 4]

Checking count:
>>> my_list.append(3)
>>> my_list.append(7)
>>> my_list.append(8)
>>> my_list.append(5)
>>> print(my_list.count(5))
2

Checking copy:
>>> my_list2 = my_list.copy()
>>> print(my_list2)
[5, 4, 3, 7, 8, 5]

Checking sorted:
>>> my_list.print_sorted()
[3, 4, 5, 5, 7, 8]

Checking sorted with negative numbers:
>>> my_list.append(-7)
>>> my_list.append(-8)
>>> my_list.append(-2)
>>> my_list.print_sorted()
[-8, -7, -2, 3, 4, 5, 5, 7, 8]

Checking clear:
>>> my_list.clear()
>>> print(my_list)
[]

Calling print_sorted with more than 1 argument:
>>> my_list.print_sorted("2")
Traceback (most recent call last):
...
TypeError: print_sorted() takes 1 positional argument but 2 were given
