Test for task 7 inheritance project
============================================

Write a class BaseGeometry (based on 6-base_geometry.py).

Public instance method: def area(self): that raises an Exception with the message area() is not implemented
Public instance method: def integer_validator(self, name, value): that validates value:
you can assume name is always a string
if value is not an integer: raise a TypeError exception, with the message <name> must be an integer
if value is less or equal to 0: raise a ValueError exception with the message <name> must be greater than 0
You are not allowed to import any module
_______________________________________________

Import function to tests:
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()

>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator("my_int", 1.02)
Traceback (most recent call last):
TypeError: my_int must be an integer

>>> bg.integer_validator("my_int", 0)
Traceback (most recent call last):
ValueError: my_int must be greater than 0

>>> bg.integer_validator("my_int", -1)
Traceback (most recent call last):
ValueError: my_int must be greater than 0

>>> bg.integer_validator("my_int")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("", 24523452)

>>> bg.integer_validator("my_int","jhon")
Traceback (most recent call last):
TypeError: my_int must be an integer

Checking docstring for module:
>>> __import__('7-base_geometry').__doc__ != None
True

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> base_geometry = BaseGeometry()

Checking docstring for class:
>>> __import__('7-base_geometry').BaseGeometry.__doc__ != None
True

Checking docstring for methods:
>>> __import__('7-base_geometry').BaseGeometry.integer_validator.__doc__ != None
True
>>> __import__('7-base_geometry').BaseGeometry.area.__doc__ != None
True

Checking value:
>>> base_geometry.integer_validator("Int", 2)
>>> base_geometry.integer_validator("Negative", -1)
Traceback (most recent call last):
...
ValueError: Negative must be greater than 0
>>> base_geometry.integer_validator("String", "test")
Traceback (most recent call last):
...
TypeError: String must be an integer
>>> base_geometry.integer_validator("Zero", 0)
Traceback (most recent call last):
...
ValueError: Zero must be greater than 0
>>> base_geometry.integer_validator("List", [1, 2, 3])
Traceback (most recent call last):
...
TypeError: List must be an integer

Checking area:
>>> base_geometry.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

Checking calling class with 1 argument:
>>> base_geometry = BaseGeometry(1)
Traceback (most recent call last):
...
TypeError: object() takes no parameters

Checking calling integer_validator with no arguments:
>>> base_geometry.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Checking calling integer_validator with 1 argument:
>>> base_geometry.integer_validator("test")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

Checking calling integer_validator with more than 2 arguments:
>>> base_geometry.integer_validator("test", 1, 2)
Traceback (most recent call last):
...
TypeError: integer_validator() takes 3 positional arguments but 4 were given
