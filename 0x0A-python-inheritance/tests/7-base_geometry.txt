Test for task 7 inheritance project
============================================

Write a class BaseGeometry (based on 6-base_geometry.py).

Public instance method: def area(self): that raises an Exception with the message area() is not implemented
Public instance method: def integer_validator(self, name, value): that validates value:
you can assume name is always a string
if value is not an integer: raise a TypeError exception, with the message <name> must be an integer
if value is less or equal to 0: raise a ValueError exception with the message <name> must be greater than 0
You are not allowed to import any module
_______________________________________________

Import function to tests:
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()

>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator("my_int", 1.02)
Traceback (most recent call last):
TypeError: my_int must be an integer

>>> bg.integer_validator("my_int", 0)
Traceback (most recent call last):
ValueError: my_int must be greater than 0

>>> bg.integer_validator("my_int", -1)
Traceback (most recent call last):
ValueError: my_int must be greater than 0

>>> bg.integer_validator("my_int")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("", 24523452)
