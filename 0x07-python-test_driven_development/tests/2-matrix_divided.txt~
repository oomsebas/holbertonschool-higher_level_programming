The test for task 1 divide a matrix
=====================================

Prototype: def matrix_divided(matrix, div):
matrix must be a list of lists of integers or floats, otherwise raise a TypeError 
exception with the message matrix must be a matrix (list of lists) of integers/floats

Each row of the matrix must be of the same size, otherwise raise a TypeError
exception with the message Each row of the matrix must have the same size

div must be a number (integer or float), otherwise raise a TypeError exception
with the message div must be a number

div canâ€™t be equal to 0, otherwise raise a ZeroDivisionError exception with the
message division by zero

All elements of the matrix should be divided by div, rounded to 2 decimal places
Returns a new matrix
_______________________________________

import the module to test
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

check for matrix to be list of list
>>> matrix = []
>>> matrix_divided(matrix, 1)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [1,[3, 4]]
>>> matrix_divided(matrix, 1)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [[1, 2], 4]
>>> matrix_divided(matrix, 1)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [1, 2]
>>> matrix_divided(matrix, 1)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [[1, 2]]
>>> matrix_divided(matrix, 1)
[[1.0, 2.0]]

check for the matrix memebers to be int or float
>>> matrix = [[1.1, 2.2], [3.3, 4.4]]
>>> matrix_divided(matrix, 1)
[[1.1, 2.2], [3.3, 4.4]]

>>> matrix = [[1.1, 1], [2, 3.3]]
>>> matrix_divided(matrix, 1)
[[1.1, 1.0], [2.0, 3.3]]

>>> matrix = [[1, 2], [3, 4]]
>>> matrix_divided(matrix, 1)
[[1.0, 2.0], [3.0, 4.0]]

>>> matrix = [["h", 1], [2, 3]]
>>> matrix_divided(matrix, 1)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [[1.1, "holberton"], [2, 3]]
>>> matrix_divided(matrix, 1)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [[1.1, 0], [2, [1]]]
>>> matrix_divided(matrix, 1)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [(1, 2), [3, 4]]
>>> matrix_divided(matrix, 1)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

check for all the rows are equal
>>> matrix = [[1,2,3], [1]]
>>> matrix_divided(matrix, 1)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

>>> matrix = [[1,2,3],[]]
>>> matrix_divided(matrix, 1)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

>>> matrix = [[],[]]
>>> matrix_divided(matrix, 1)
[[], []]

>>> matrix = [[1,2,3],[2, 4, 6 ,8]]
>>> matrix_divided(matrix, 1)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

>>> matrix = [[1,2,3],[1,2,3]]
>>> matrix_divided(matrix, 1)
[[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]]

Check for the divisor different of int or float:
>>> matrix = [[1,2,3],[2, 4, 6]]
>>> matrix_divided(matrix, "Holberton")
Traceback (most recent call last):
...
TypeError: div must be a number

>>> matrix_divided(matrix, [1])
Traceback (most recent call last):
...
TypeError: div must be a number

>>> matrix = [[], []]
>>> matrix_divided(matrix, 1)
[[], []]
