The test for task 0 add two integers
=====================================

The sum of two integers
a and b must be integers or floats, otherwise raise a TypeError exception with
the message a must be an integer or b must be an integer
a and b must be first casted to integers if they are float
Returns an integer: the addition of a and b
_______________________________________

Import the function to test:
>>> add_integer = __import__('0-add_integer').add_integer

Checking docstring for module:
>>> __import__('0-add_integer').__doc__ != None
True

Call with one argument:
>>> add_integer(1)
99

Simple sum of two integers:
>>> add_integer(2, 2)
4

Sum of a float and a int:
>>> add_integer(2.2, 2)
4

Sum of a string on variable a an a integer on b:
>>> add_integer("h", 1)
Traceback (most recent call last):
...
TypeError: a must be an integer

Sum of a string on the variable b and a integer on variable a:
>>> add_integer(1, "h")
Traceback (most recent call last):
...
TypeError: b must be an integer

Sum of None in the two variables:
>>> add_integer(None, None)
Traceback (most recent call last):
...
TypeError: a must be an integer

Adding with negative numbers:
>>> add_integer(-8, 2)
-6

Adding with negative numbers:
>>> add_integer(2, -8)
-6

Adding with float numbers:
>>> add_integer(2.5, 4.3)
6

>>> add_integer(2.5, 7)
9

>>> add_integer(7, 2.2)
9

Check the return of the function:
>>> type(add_integer(8, 2)) == int
True

Add with big numbers:
>>> add_integer(111111111111111, 11111111111111)
122222222222222

>>> add_integer(float('inf'), 2)
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer

Call empty function:
>>> add_integer()
Traceback (most recent call last):
...
TypeError: add_integer() missing 1 required positional argument: 'a'

call function with more than 2 arguments:
>>> add_integer(1, 2, 3)
Traceback (most recent call last):
...
TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

